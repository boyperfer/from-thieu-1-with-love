{"ast":null,"code":"import _defineProperty from \"/Users/vnfreedomboy/Desktop/from-thieu-1-with-love/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/vnfreedomboy/Desktop/from-thieu-1-with-love/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/vnfreedomboy/Desktop/from-thieu-1-with-love/client/src/components/Deck/deck.component.jsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from 'react';\nimport { useSprings, interpolate } from 'react-spring';\nimport { useGesture } from 'react-use-gesture';\nimport { withRouter } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { CardContainer, Card, DeckContainer } from './deck.style'; // These two are just helpers, they curate spring data, values that are later being interpolated into css\n\nconst to = i => ({\n  x: 0,\n  y: i * -4,\n  scale: 1,\n  rot: -10 + Math.random() * 20,\n  delay: i * 100\n});\n\nconst from = i => ({\n  x: 0,\n  rot: 0,\n  scale: 1.5,\n  y: -1000\n}); // This is being used down there in the view, it interpolates rotation and scale into a css transform\n\n\nconst trans = (r, s) => \"perspective(1500px) rotateX(30deg) rotateY(\".concat(r / 10, \"deg) rotateZ(\").concat(r, \"deg) scale(\").concat(s, \")\");\n\nconst Deck = ({\n  history,\n  picture\n}) => {\n  const isVeChai = useSelector(({\n    picture: {\n      isVeChai\n    }\n  }) => isVeChai);\n\n  const _useState = useState(() => new Set()),\n        _useState2 = _slicedToArray(_useState, 1),\n        gone = _useState2[0]; // The set flags all the cards that are flicked out\n\n\n  const _useSprings = useSprings(picture.length, i => _objectSpread({}, to(i), {\n    from: from(i)\n  })),\n        _useSprings2 = _slicedToArray(_useSprings, 2),\n        props = _useSprings2[0],\n        set = _useSprings2[1]; // Create a bunch of springs using the helpers above\n  // Create a gesture, we're interested in down-state, delta (current-pos - click-pos), direction and velocity\n\n\n  const bind = useGesture(({\n    args: [index],\n    down,\n    delta: [xDelta],\n    distance,\n    direction: [xDir],\n    velocity\n  }) => {\n    const trigger = velocity > 0.2; // If you flick hard enough it should trigger the card to fly out\n\n    const dir = xDir < 0 ? -1 : 1; // Direction should either point left or right\n\n    if (!down && trigger) gone.add(index); // If button/finger's up and trigger velocity is reached, we flag the card ready to fly out\n\n    set(i => {\n      if (index !== i) return; // We're only interested in changing spring-data for the current spring\n\n      const isGone = gone.has(index);\n      const x = isGone ? (200 + window.innerWidth) * dir : down ? xDelta : 0; // When a card is gone it flys out left or right, otherwise goes back to zero\n\n      const rot = xDelta / 100 + (isGone ? dir * 10 * velocity : 0); // How much the card tilts, flicking it harder makes it rotate faster\n\n      const scale = down ? 1.1 : 1; // Active cards lift up a bit\n\n      return {\n        x,\n        rot,\n        scale,\n        delay: undefined,\n        config: {\n          friction: 50,\n          tension: down ? 800 : isGone ? 200 : 500\n        }\n      };\n    });\n    if (!down && gone.size === picture.length) setTimeout(() => gone.clear() || set(i => to(i)), 600);\n  }); // Now we're just mapping the animated values to our view, that's it. Btw, this component only renders once. :-)\n\n  return props.map(({\n    x,\n    y,\n    rot,\n    scale\n  }, i) => React.createElement(DeckContainer, {\n    key: i,\n    style: {\n      transform: interpolate([x, y], (x, y) => \"translate3d(\".concat(x, \"px,\").concat(y, \"px,0)\"))\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, React.createElement(CardContainer, Object.assign({}, bind(i), {\n    style: {\n      transform: interpolate([rot, scale], trans)\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }), history.location.pathname === '/ve-chai' ? React.createElement(Card, {\n    imageUrl: picture[i],\n    isVeChai: isVeChai,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }) : React.createElement(Card, {\n    imageUrl: picture[i],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }))));\n};\n\nexport default withRouter(Deck);","map":{"version":3,"sources":["/Users/vnfreedomboy/Desktop/from-thieu-1-with-love/client/src/components/Deck/deck.component.jsx"],"names":["React","useState","useSprings","interpolate","useGesture","withRouter","useSelector","CardContainer","Card","DeckContainer","to","i","x","y","scale","rot","Math","random","delay","from","trans","r","s","Deck","history","picture","isVeChai","Set","gone","length","props","set","bind","args","index","down","delta","xDelta","distance","direction","xDir","velocity","trigger","dir","add","isGone","has","window","innerWidth","undefined","config","friction","tension","size","setTimeout","clear","map","transform","location","pathname"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { useSprings, interpolate } from 'react-spring';\nimport { useGesture } from 'react-use-gesture';\nimport { withRouter } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\n\nimport { CardContainer, Card, DeckContainer } from './deck.style';\n\n// These two are just helpers, they curate spring data, values that are later being interpolated into css\nconst to = i => ({ x: 0, y: i * -4, scale: 1, rot: -10 + Math.random() * 20, delay: i * 100 });\nconst from = i => ({ x: 0, rot: 0, scale: 1.5, y: -1000 });\n// This is being used down there in the view, it interpolates rotation and scale into a css transform\nconst trans = (r, s) =>\n    `perspective(1500px) rotateX(30deg) rotateY(${r / 10}deg) rotateZ(${r}deg) scale(${s})`;\n\nconst Deck = ({ history, picture }) => {\n    const isVeChai = useSelector(({ picture: { isVeChai } }) => isVeChai);\n    const [gone] = useState(() => new Set()); // The set flags all the cards that are flicked out\n    const [props, set] = useSprings(picture.length, i => ({ ...to(i), from: from(i) })); // Create a bunch of springs using the helpers above\n    // Create a gesture, we're interested in down-state, delta (current-pos - click-pos), direction and velocity\n    const bind = useGesture(\n        ({ args: [index], down, delta: [xDelta], distance, direction: [xDir], velocity }) => {\n            const trigger = velocity > 0.2; // If you flick hard enough it should trigger the card to fly out\n            const dir = xDir < 0 ? -1 : 1; // Direction should either point left or right\n            if (!down && trigger) gone.add(index); // If button/finger's up and trigger velocity is reached, we flag the card ready to fly out\n            set(i => {\n                if (index !== i) return; // We're only interested in changing spring-data for the current spring\n                const isGone = gone.has(index);\n                const x = isGone ? (200 + window.innerWidth) * dir : down ? xDelta : 0; // When a card is gone it flys out left or right, otherwise goes back to zero\n                const rot = xDelta / 100 + (isGone ? dir * 10 * velocity : 0); // How much the card tilts, flicking it harder makes it rotate faster\n                const scale = down ? 1.1 : 1; // Active cards lift up a bit\n                return {\n                    x,\n                    rot,\n                    scale,\n                    delay: undefined,\n                    config: { friction: 50, tension: down ? 800 : isGone ? 200 : 500 }\n                };\n            });\n            if (!down && gone.size === picture.length)\n                setTimeout(() => gone.clear() || set(i => to(i)), 600);\n        }\n    );\n    // Now we're just mapping the animated values to our view, that's it. Btw, this component only renders once. :-)\n    return props.map(({ x, y, rot, scale }, i) => (\n        <DeckContainer\n            key={i}\n            style={{ transform: interpolate([x, y], (x, y) => `translate3d(${x}px,${y}px,0)`) }}\n        >\n            {/* This is the card itself, we're binding our gesture to it (and inject its index so we know which is which) */}\n            <CardContainer\n                {...bind(i)}\n                style={{\n                    transform: interpolate([rot, scale], trans)\n                }}\n            >\n                {history.location.pathname === '/ve-chai' ? (\n                    <Card imageUrl={picture[i]} isVeChai={isVeChai} />\n                ) : (\n                    <Card imageUrl={picture[i]} />\n                )}\n            </CardContainer>\n        </DeckContainer>\n    ));\n};\n\nexport default withRouter(Deck);\n"]},"metadata":{},"sourceType":"module"}